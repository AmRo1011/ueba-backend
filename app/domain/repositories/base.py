from abc import ABC, abstractmethod
from typing import Iterable, Optional
from app.domain.entities.user import UserEntity
from app.domain.entities.log import LogEntity
from app.domain.entities.anomaly import AnomalyEntity

class IUserRepo(ABC):
    @abstractmethod
    def get_by_id(self, id: int) -> Optional[UserEntity]: ...
    @abstractmethod
    def get_by_uid(self, uid: str) -> Optional[UserEntity]: ...
    @abstractmethod
    def add(self, u: UserEntity) -> UserEntity: ...
    @abstractmethod
    def update(self, u: UserEntity) -> None: ...
    @abstractmethod
    def bump_user_risk(self, user_id:int, risk:float) -> None: ...
    @abstractmethod
    def top_by_risk(self, limit:int=100, min_risk:float=0) -> list[UserEntity]: ...

class ILogRepo(ABC):
    @abstractmethod
    def bulk_add(self, rows: Iterable[LogEntity]) -> int: ...
    @abstractmethod
    def resolve_activity_type_id(self, code: str) -> int: ...
    @abstractmethod
    def after_hours_counts(self, open_start:int=8, open_end:int=18): ...

class IAnomalyRepo(ABC):
    @abstractmethod
    def add(self, a: AnomalyEntity) -> AnomalyEntity: ...
    @abstractmethod
    def set_status(self, anomaly_id: int, status: str) -> None: ...
    @abstractmethod
    def resolve_type_id(self, code: str) -> int: ...
